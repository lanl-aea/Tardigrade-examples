#! /usr/bin/env python

""" Workflow for single domain upscaling of a GEOS MPM DNS of an elastic cylinder under uni-axial stress in compression
Requires the following ``Sconscript(..., exports=[])``
* ``env`` - The SCons construction environment with the following required keys
  * ``DNS_GEOS_abspath`` - String absolute path to model_package/DNS_GEOS
  * ``filter_source_abspath`` - String absolute path to model_package/Filter
  * ``model_package_abspath`` - String absolute path to model_package
  * ``peta_data_copy_abspath`` - String absolute path to peta_data_copy
  * ``filter`` - Boolean speciyfing whether or not to run micromorphic filter for a particular upscaling study
  * ``calibrate`` - Boolean speciyfing whether or not to run calibration for a particular upscaling study
  * ``macro`` - Boolean speciyfing whether or not to run macro simulation(s) in Tardigrade-MOOSE
"""

import pathlib

from model_package.DNS_GEOS import simulation_variables_nominal


# Inherit the parent construction environment
Import('env')

# set project-wide paths with os-agnostic path separators
DNS_GEOS_abspath = pathlib.Path(env["DNS_GEOS_abspath"])
filter_source_abspath = pathlib.Path(env["filter_source_abspath"])
model_package_abspath = pathlib.Path(env["model_package_abspath"])
peta_data_copy_abspath = pathlib.Path(env["peta_data_copy_abspath"])

# Simulation variables
build_directory = pathlib.Path(Dir('.').abspath)
workflow_name = build_directory.name
output_file_type = "h5"
model = "GEOS_elastic_cylinder"
params = simulation_variables_nominal.elastic_cylinder

# Collect the target nodes to build a concise alias for all targets
workflow = []

# specify targets for visualizing Micromorphic Filter output
viz_targs =  (
    ('plot-stress-norms', 'stress_norms.png'),
    ('plot-better-stress-norms', 'better_stress_norms.png'),
    ('plot-best-stress-norms', 'best_stress_norms.png'),
    ('plot-norm-histories', 'norm_histories.png'),
    ('plot-cauchy-couple', 'cauchy_couple.png'),
    ('plot-cauchy-stress', 'cauchy_stress.png'),
    ('plot-PK2-stress', 'PK2_stress.png'),
    ('plot-symm-stress', 'symm_stress.png'),
    ('plot-SIGMA-stress', 'SIGMA_stress.png'),
    ('plot-stress-diff', 'stress_diff.png'),
    ('plot-body-couples', 'body_couples.png'),
    ('plot-spin-inertias', 'micro_spin_inertias.png'),
    ('plot-spin-diff', 'spin_diff.png'),
    ('p-q-plots', 'p_q_plots.png'),
    ('csv-cauchy', 'cauchy.csv'),
    ('csv-PK2', 'PK2.csv'),
    ('csv-GLstrain', 'GLstrain.csv'),
    ('csv-estrain', 'estrain.csv'),
    ('csv-ref-mod', 'ref_moduli.csv'),
    ('csv-cur-mod', 'cur_moduli.csv'),
    ('csv-symm', 'symm.csv'),
    ('csv-stress-diff', 'stress_diff.csv'),
    ('csv-m', 'm_stress.csv'),
    ('csv-M', 'M_stress.csv'),
    ('csv-stress33-all', 'all_33_stresses.csv'),
    )
params['viz_targs'] = viz_targs

# ---------- Process existing DNS ----------------------------------------------
DNS_fileroot = f"{peta_data_copy_abspath}/{params['DNS_fileroot']}/"
results_file = params['DNS_file']

# Filter prep - Extract results to XDMF
main_XDMF_name = f"FILTER_INPUT_{model}"
filter_inputs = [f"{main_XDMF_name}.{ext}" for ext in ['xdmf', 'h5']]
cauchy_stresses = "DNS_all_33_stresses.csv"
XDMF_script = "vtk_to_xdmf.py"
script_options = f"--input-file {results_file}"
script_options += f" --file-root {DNS_fileroot}"
script_options += f" --output-file {str(build_directory / main_XDMF_name)}"
script_options += " --dist-factor 1"
script_options += " --stress-factor 1000."
script_options += " --density-factor 1.e-9"
workflow.extend(env.PythonScript(
    target=filter_inputs,
    source=[str(DNS_GEOS_abspath / XDMF_script), f'{DNS_fileroot}/{results_file}'],
    script_options=script_options))

# Get bounding information from DNS extents
bounding_csv = f"{model}_bounds.csv"
bounding_script = "bounds_from_DNS.py"
script_options = f"--dns-file {filter_inputs[0]}"
script_options += f" --output-file {bounding_csv}"
workflow.extend(env.PythonScript(
    target=bounding_csv,
    source=[str(filter_source_abspath / bounding_script)] + filter_inputs,
    script_options=script_options))

# TODO: bounds from background grid are larger than material points, figure out how to force the correct sized cylinder
rad = 0.5*params['diam']
bounding_csv = f"{model}_forced_bounds.csv"
bounding_script = "force_bounds.py"
script_options = f"--output-file {bounding_csv}"
script_options += f" --xmin {-1*rad} --xmax {rad} --ymin {-1*rad} --ymax {rad} --zmin 0 --zmax {params['height']}"
workflow.extend(env.PythonScript(
    target=bounding_csv,
    source=[str(filter_source_abspath / bounding_script)],
    script_options=script_options))

params['bounding_csv'] = str(build_directory / bounding_csv)
filter_inputs = [f"{str(build_directory / main_XDMF_name)}.{ext}" for ext in ['xdmf', 'h5']]

# Post-processing step - force vs. displacement
plot_script = "plot_force_displacement.py"
force_results = f"{DNS_fileroot}/{params['DNS_forces']}"
force_plot_targets = [f"{model}_force_displacement.png", f"{model}_force_displacement.csv"]
script_options = f"--csv-file {force_results}"
script_options += f" --output-file {force_plot_targets[0]}"
script_options += f" --output-csv {force_plot_targets[1]}"
script_options += " --force-col ' Rz+'"
script_options += " --length-col ' length_z'"
script_options += " --header-row 0"
script_options += " --header-row 0"
script_options += " --force-factor -1000 --disp-factor -1"
script_options += " --filter-markers 0 23 45 67 89 111 133 155 177 199 221 243"
workflow.extend(env.PythonScript(
    target=[force_plot_targets],
    source=[str(DNS_GEOS_abspath / plot_script)],
    script_options=script_options,
    ))

# # # Get image of DNS results
# # paraview_script= "get_paraview_image.py"
# # paraview_image = f"{model}_Cauchy.png"
# # script_options = f"--input-file {results_files[-1]}"
# # script_options += f" --output-file {paraview_image}"
# # script_options += " --field diagnostic_quantitiesprojected.Cauchy_stress_zz"
# # script_options += " --field-min -10.0 --field-max 0.0"
# # script_options += " --legend-title 'Cauchy Stress 33 (MPa)'"
# # workflow.extend(env.ParaviewImage(
    # # target=paraview_image,
    # # source=[str(model_package_abspath / paraview_script)] + results_files,
    # # script=str(model_package_abspath / paraview_script),
    # # script_options=script_options))

# ---------- FILTER ------------------------------------------------------------
parameters = {'seed_size': params['height'],
              'num_domains': 1,}
filter_results = f"FILTER_RESULTS_{model}_1"
filter_targs = [f"{filter_results}.{ext}" for ext in ['xdmf', 'h5']]
params['filter_targs'] = filter_targs
# Run common filter sconscript
if env['filter']:
    workflow.extend(
        SConscript("filter.scons",
                   exports=["env", "parameters", "workflow_name", "model", "params", "filter_inputs"],
                   duplicate=False))

# ---------- CALIBRATE ---------------------------------------------------------
# Run common calibration sconscript
case = params['calibration_case']
if env['calibrate']:
    filter_file = str(build_directory / filter_targs[0])
    params['filter_file'] = filter_file
    workflow.extend(
        SConscript("calibrate_element.scons",
                   exports=["env", "parameters", "workflow_name", "model", "params"],
                   duplicate=False))
params['calibration_map'] = f'{build_directory}/Calibration_map_elastic_parameters_case_{case}_1.csv'

# ---------- Tardigrade-MOOSE --------------------------------------------------
# Run common Tardigrade-MOOSE sconscript
if env['macro']:
    calibration_map = params['calibration_map']
    tardi_sim_name = f'TARDIGRADE-MOOSE_{model}_1_elements_calib_case_{case}'
    workflow.extend(
        SConscript("tardigrade_moose.scons",
                   exports=["env", "parameters", "workflow_name", "model", "params", "tardi_sim_name", "calibration_map"],
                   duplicate=False))

# Collector alias based on parent directory name
env.Alias(workflow_name, workflow)
