#! /usr/bin/env python

""" Workflow for running and multi domain upscaling of a Ratel DNS of an elastic cylinder under uni-axial stress in compression
Requires the following ``Sconscript(..., exports=[])``
* ``env`` - The SCons construction environment
"""

import pathlib

import waves
import numpy

from model_package.DNS_Ratel import simulation_variables_nominal


# Inherit the parent construction environment
Import('env')

# Simulation variables
build_directory = pathlib.Path(Dir('.').abspath)
workflow_name = build_directory.name
workflow_configuration = [env["project_configuration"], workflow_name]
output_file_type = "h5"
model = "elastic_cylinder"
params = simulation_variables_nominal.elastic_cylinder

# Collect the target nodes to build a concise alias for all targets
workflow = []

# specify targets for visualizing Micromorphic Filter output
viz_targs =  (
    ('plot-stress-norms', 'stress_norms.png'),
    ('csv-cauchy', 'cauchy.csv'),
    ('csv-PK2', 'PK2.csv'),
    ('csv-GLstrain', 'GLstrain.csv'),
    ('csv-estrain', 'estrain.csv'),
    ('csv-ref-mod', 'ref_moduli.csv'),
    ('csv-cur-mod', 'cur_moduli.csv'),
    ('csv-symm', 'symm.csv'),
    ('csv-stress-diff', 'stress_diff.csv'),
    ('csv-m', 'm_stress.csv'),
    ('csv-M', 'M_stress.csv'),
    ('csv-stress33-all', 'all_33_stresses.csv'),
    )
params['viz_targs'] = viz_targs

# ---------- DNS ---------------------------------------------------------------
# Run common DNS sconscript
workflow.extend(
    SConscript("Ratel_elastic_cylinder.scons",
               exports=["env", "workflow_name", "model", "params"],
               duplicate=False))
filter_inputs = params['filter_inputs']

# ---------- MULTI-DOMAIN ------------------------------------------------------
# setup several options for different studies
if params['cut'] == False:
    if 'cubit' not in env.keys():
        raise NotImplementedError("Without access to Cubit, this workflow can not be completed!")
    parameter_schema = dict(
        parameter_samples = numpy.array([
            [5.0, 1],
            [2.5, 4],
            [2.0, 36],
            [1.0, 160]], dtype=object),
        parameter_names = numpy.array(["seed_size", "num_domains"])
    )
elif params['cut'] == True:
    parameter_schema = dict(
        parameter_samples = numpy.array([
            [5.0, 1],
            [2.5, 24],
            [1.5, 48],
            [1.0, 192]], dtype=object),
        parameter_names = numpy.array(["seed_size", "num_domains"])
    )
else:
    print('Specify valid option!')

parameter_flag = False
if env['selected_parameter_sets'] != "All":
    parameter_flag = True
    selected_parameter_sets = [int(i) for i in env['selected_parameter_sets'].split(' ')]

parameter_generator = waves.parameter_generators.CustomStudy(parameter_schema)
for set_name, parameters in parameter_generator.parameter_study_to_dict().items():

    # Optionally skip certain parameter sets
    if parameter_flag == True:
        set = int(str(set_name).split('parameter_set')[-1])
        if set not in selected_parameter_sets:
            continue

    set_name = pathlib.Path(set_name)

    domain_number = parameters['num_domains']
    seed_size = parameters['seed_size']

    filter_results = f"FILTER_RESULTS_{model}_{int(domain_number)}"
    filter_targs = [f"{filter_results}.{ext}" for ext in ['xdmf', 'h5']]
    params['filter_targs'] = filter_targs

    # ---------- FILTER --------------------------------------------------------
    # Run common filter sconscript
    if env['filter']:
        variant_dir = build_directory / set_name
        workflow.extend(
            SConscript("filter.scons", variant_dir=variant_dir,
                       exports=["env", "parameters", "workflow_name", "model", "params", "filter_inputs"],
                       duplicate=False))

    # ---------- CALIBRATE -----------------------------------------------------
    case = params['calibration_case']
    if env['calibrate']:
        filter_file = str(build_directory / set_name / filter_targs[0])
        params['filter_file'] = filter_file
        variant_dir = build_directory / set_name
        # Run common calibration sconscript
        workflow.extend(
            SConscript("calibrate_element.scons", variant_dir=variant_dir,
                       exports=["env", "parameters", "workflow_name", "model", "params"],
                       duplicate=False))
    params['calibration_map'] = f'{build_directory}/{set_name}/Calibration_map_elastic_parameters_case_{case}_{domain_number}.csv'

    # ---------- Tardigrade-MOOSE ----------------------------------------------
    # Run common Tardigrade-MOOSE sconscript
    if env['macro']:
        calibration_map = params['calibration_map']
        tardi_sim_name = f'TARDIGRADE-MOOSE_{model}_{domain_number}_elements_calib_case_{case}'
        variant_dir = build_directory / set_name
        workflow.extend(
            SConscript("tardigrade_moose.scons", variant_dir=variant_dir,
                       exports=["env", "parameters", "workflow_name", "model", "params", "tardi_sim_name", "calibration_map"],
                       duplicate=False))

# ---------- Collect Results across Studies ------------------------------------
# Run common post-processing sconscript
if env['summary']:
    study = parameter_generator.parameter_study_to_dict()
    set_names = [pathlib.Path(set_name) for set_name, _ in study.items()]
    num_domains = [str(study[key]['num_domains']) for key in study.keys()]
    dns_forces = f"DNS_{model}_results_force_displacement.csv"

    workflow.extend(
        SConscript("summarize_multi_domain.scons",
                   exports=["env", "workflow_name", "model", "params", "set_names", "num_domains", "dns_forces"],
                   duplicate=False))

# Collector alias based on parent directory name
env.Alias(workflow_name, workflow)
