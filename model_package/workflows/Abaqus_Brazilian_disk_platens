#! /usr/bin/env python

""" Workflow for running an Abaqus/Standard simulation of a Brazilian disk indirect tension experiment with loading platens
Requires the following ``Sconscript(..., exports=[])``
* ``env`` - The SCons construction environment with the following required keys
  * ``DNS_Abaqus_abspath`` - String absolute path to the Abaqus journal files
  * ``Tardigrade_MOOSE_source_abspath`` - String path for the Tardigrade-MOOSE application
  * ``mesh_templates_abspath`` - String absolute path to model_package/meshes
"""

import pathlib

from model_package.Tardigrade_MOOSE import simulation_variables_nominal


# Inherit the parent construction environment
Import('env')

# set project-wide paths with os-agnostic path separators
DNS_Abaqus_abspath = pathlib.Path(env["DNS_Abaqus_abspath"])
Tardigrade_MOOSE_source_abspath = pathlib.Path(env["Tardigrade_MOOSE_source_abspath"])
mesh_templates_abspath = pathlib.Path(env["mesh_templates_abspath"])

# Simulation variables
build_directory = pathlib.Path(Dir('.').abspath)
workflow_name = build_directory.name
output_file_type = "h5"
model = "Brazil_disk_platens"
params = simulation_variables_nominal.Brazilian_disk_platens

# Collect the target nodes to build a concise alias for all targets
workflow = []

# Build mesh
mesh_script = 'brazilian_disk_apparatus.py'
abq_mesh_name = 'brazilian_disk_apparatus_sym'
abq_meshes = [f'{abq_mesh_name}_bottom_platen.inp',
              f'{abq_mesh_name}_top_platen.inp',
              f'{abq_mesh_name}_specimen.inp']
script_options = f"--output-file {abq_mesh_name}"
script_options += f" --specimen-seed-size {params['seed_size']}"
script_options += f" --platen-seed-size {params['platen_seed_size']}"
script_options += f" --height {params['height']}"
script_options += f" --width {params['width']}"
script_options += f" --chord {params['chord']}"
script_options += f" --app-rad {params['app_rad']}"
script_options += f" --app-dep {params['app_dep']}"
script_options += f" --spec-rad {params['spec_rad']}"
script_options += f" --spec-dep {params['spec_dep']}"
script_options += f" --tol {params['tol']}"
workflow.extend(env.PythonScript(
    target=[abq_meshes],
    source=[str(Tardigrade_MOOSE_source_abspath / mesh_script)],
    script_options=script_options
    ))

params['bottom_platen_mesh_file'] = abq_meshes[0]
params['top_platen_mesh_file'] = abq_meshes[1]
params['specimen_mesh_file'] = abq_meshes[2]
abaqus_source_list = [
    DNS_Abaqus_abspath / "brazil_disk" / "input.inp.in",
]

workflow.extend(env.CopySubstfile(
    abaqus_source_list,
    substitution_dictionary=env.SubstitutionSyntax(params),
))
# Abaqus Solve
solve_source_list = [source_file.name.rstrip('.in') for source_file in abaqus_source_list]
job_name = model
abaqus_options = '-double both'
workflow.extend(env.AbaqusSolver(
    target = [f"{job_name}.sta"],
    source = solve_source_list,
    job_name = job_name,
    abaqus_options = abaqus_options
))

# Extract Abaqus
extract_source_list = [f"{job_name}.odb"]
workflow.extend(env.AbaqusExtract(
    target = [f"{job_name}.h5", f"{job_name}_datasets.h5"],
    source = extract_source_list,
))

# Post-processing step #1 - force vs. displacement
plot_name = f"{job_name}_force_displacement"
plot_script = "extract_history.py"
post_processing_source = [f"{job_name}_datasets.h5"]
script_options = "--input-file " + " ".join(str(path) for path in post_processing_source)
script_options += " --output-file ${TARGET.file} --x-units 'mm' --y-units 'N'"
script_options += " --x-path 'A/HistoryOutputs/LOAD_HERE/U2'"
script_options += " --y-path 'A/HistoryOutputs/LOAD_HERE/RF2'"
script_options += " --x-label 'Displacement' --y-label 'Force'"
script_options += f" --csv_file {plot_name}.csv"
workflow.extend(env.PythonScript(
    target = [f"{plot_name}.png", f"{plot_name}.csv"],
    source = [f"{DNS_Abaqus_abspath / plot_script}"] + post_processing_source,
    script_options = script_options
))

# Collector alias based on parent directory name
env.Alias(workflow_name, workflow)
