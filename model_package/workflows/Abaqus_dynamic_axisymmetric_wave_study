#! /usr/bin/env python

""" Workflow for running and multi domain upscaling of an Abaqus/Standard dynamic DNS of an elastic cylinder under uni-axial stress in compression
Requires the following ``Sconscript(..., exports=[])``
* ``env`` - The SCons construction environment with the following required keys
  * ``Tardigrade_MOOSE_source_abspath`` - String absolute path to model_package/Tardigrade-MOOSE
  * ``cubit`` - String absolute path to Cubit Python intepreter, optional
  * ``selected_parameter_sets`` - Optional string of space separated integers specifying which parameters sets should be considered for filtering, calibrating, and performing macroscale simulations
  * ``filter`` - Boolean speciyfing whether or not to run micromorphic filter for a particular upscaling study
  * ``macro`` - Boolean speciyfing whether or not to run macro simulation(s) in Tardigrade-MOOSE
  * ``summary`` - Boolean speciyfing whether or not to run summary post-processing for multi-domain studies
"""

import pathlib

import waves
import numpy

from model_package.DNS_Abaqus import simulation_variables_nominal


# Inherit the parent construction environment
Import('env')

# set project-wide paths with os-agnostic path separators
Tardigrade_MOOSE_source_abspath = pathlib.Path(env["Tardigrade_MOOSE_source_abspath"])

# Simulation variables
build_directory = pathlib.Path(Dir('.').abspath)
workflow_name = build_directory.name
output_file_type = "h5"
model = "axisymmetric_wave_study"
params = simulation_variables_nominal.axisymmetric_wave_study

# Collect the target nodes to build a concise alias for all targets
workflow = []

# ---------- MULTI-DOMAIN ------------------------------------------------------
# setup several options for different studies
parameter_schema = dict(
    parameter_samples = numpy.array([
        [0., "at_surface"],
        [1., "depth_1"],
        [2.5, "depth_2"],
        [5.0, "depth_3"]], dtype=object),
    parameter_names = numpy.array(["source_depth", "study_name"])
)

parameter_flag = False
if env['selected_parameter_sets'] != "All":
    parameter_flag = True
    selected_parameter_sets = [int(i) for i in env['selected_parameter_sets'].split(' ')]

parameter_generator = waves.parameter_generators.CustomStudy(parameter_schema)
for set_name, parameters in parameter_generator.parameter_study_to_dict().items():

    # Optionally skip certain parameter sets
    if parameter_flag == True:
        set = int(str(set_name).split('parameter_set')[-1])
        if set not in selected_parameter_sets:
            continue

    set_name = pathlib.Path(set_name)

    source_depth = parameters['source_depth']
    study_name = parameters['study_name']

    params['model_name'] = f'{model}_{study_name}'
    params['job_name'] = f'{model}_{study_name}_job'
    params['source_depth'] = source_depth

    # Run common sconscript
    variant_dir = build_directory / set_name
    workflow.extend(
        SConscript("Abaqus_dynamic_axisymmetric_point_source.scons", variant_dir=variant_dir,
                exports=["env", "workflow_name", "model", "params"],
                duplicate=False))

# ---------- Collect Results across Studies ------------------------------------
# # Run common post-processing sconscript
# if env['summary']:
#     study = parameter_generator.parameter_study_to_dict()
#     set_names = [pathlib.Path(set_name) for set_name, _ in study.items()]
#     num_domains = [str(study[key]['num_domains']) for key in study.keys()]
#     dns_forces = f"DNS_{model}_run_force_displacement.csv"

#     workflow.extend(
#         SConscript("summarize_multi_domain.scons",
#                    exports=["env", "workflow_name", "model", "params", "set_names", "num_domains", "dns_forces"],
#                    duplicate=False))

# Collector alias based on parent directory name
env.Alias(workflow_name, workflow)
