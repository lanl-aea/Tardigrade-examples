#! /usr/bin/env python

""" Common workflow for performing elastic Tardigrade-MOOSE simulations of quasi-static cylinder compression
Requires the following ``Sconscript(..., exports=[])``
* ``env`` - The SCons construction environment with the following required keys
  * ``Tardigrade_MOOSE_source_abspath`` - String absolute path to model_package/Tardigrade-MOOSE
  * ``mesh_templates_abspath`` - String absolute path to model_package/meshes
  * ``cubit`` - String absolute path to Cubit Python intepreter, optional
  * ``mpi`` - String absolute path to mpiexec program
  * ``LD_PATH`` - String absolute path(s) for shared libraries required to run Tardigrade
  * ``Tardigrade`` - String absolute path to tardigrade-opt program
  * ``solve_cpus`` - Integer specifying the number of processes to run Tardigrade-MOOSE, default=1
* ``parameters`` - WAVES CustomStudy parameter dictionary with the following required kyes
  * ``num_domains`` - The number of macroscale filtering domains
  * ``seed_size`` - The approximate element size (mm) for creating macroscale meshes in Cubit
* ``workflow_name`` - The name of the workflow calling this SConscript
* ``model`` - The name of the model
* ``params`` - Parameter dictionary with the following required keys
  * ``bounding_csv`` - String absolute path to a csv file containing the DNS bounding box data
  * ``calibration_case`` - Integer specifying the calibration case
  * ``cut`` - Boolean specifying whether a macroscale cylinder will be partioned by x-, y-, and z-planes
  * ``height`` - The height (mm) of the cylindrical geometry
  * ``mesh_copy_root`` - File root string for locating required DNS mesh in model_package/meshes if Cubit program is unavailable
  * ``macro_BC`` - The type of boundary condition to apply in the Tardigrade-MOOSE, either "slip" or "clamp" or "brazil"
  * ``macro_disp`` - The compressive displacement to apply to the top face of the cylinder
  * ``duration`` - The duration of hte Tardigrade-MOOSE simulation
* ``tardi_sim_name`` - The string root name for the Tardigrade-MOOSE simulation files
* ``calibration_map`` - String absolute path to the calibration results for each element
"""

import pathlib

import SCons.Defaults


# Inherit the parent construction environment
Import("env")
Import("parameters")
Import("workflow_name")
Import("model")
Import("params")
Import("tardi_sim_name")
Import("calibration_map")

# Set project-wide paths
Tardigrade_MOOSE_source_abspath = pathlib.Path(env["Tardigrade_MOOSE_source_abspath"])
mesh_templates_abspath = pathlib.Path(env["mesh_templates_abspath"])

# workflow variables
build_directory = pathlib.Path(Dir(".").abspath)
domain_number = parameters['num_domains']
seed_size = parameters['seed_size']
bounding_csv = params['bounding_csv']
case = params['calibration_case']
cut = params['cut']

# Collect the target nodes to build a concise alias for all targets
workflow = []

# Only run multi-domain cases
if domain_number == 1:
    tardi_mesh_name = f"TARDIGRADE-MOOSE_{model}_mesh"
    tardi_mesh_2 = f"{tardi_mesh_name}.e"
    # Build macro mesh if Cubit is found, otherwise copy a template
    if env['cubit']:
        mesh_script = 'cylinder_from_bounds.py'
        seed_size = params['height']/10
        script_options = f"--output-file {tardi_mesh_name}"
        script_options += f" --bounds-file {bounding_csv}"
        script_options += f" --seed-size {seed_size}"
        if cut:
            script_options += f" --cut cut"
        workflow.extend(env.PythonScript(
            target=[tardi_mesh_2],
            source=[str(Tardigrade_MOOSE_source_abspath / mesh_script), bounding_csv],
            script_options=script_options
            ))
    else:
        mesh_copy = f"{params['mesh_copy_root']}_0p5_960_elements_with_blocks.e"
        workflow.extend(env.Command(
            target=[tardi_mesh_2],
            source=[f"{mesh_templates_abspath}/{mesh_copy}"],
            action=SCons.Defaults.Copy("${TARGET}", "${SOURCE}", False)
            ))
else:
    tardi_mesh_name = f"TARDIGRADE-MOOSE_{model}_mesh_{domain_number}_elements"
    tardi_mesh_1 = f"{tardi_mesh_name}.e"
    tardi_mesh_2 = tardi_mesh_1.split('.')[0] + '_with_blocks.e'
    # Build macro mesh if Cubit is found, otherwise copy a template
    if env['cubit']:
        mesh_script = 'cylinder_from_bounds.py'
        script_options = f"--output-file {tardi_mesh_name}"
        script_options += f" --bounds-file {bounding_csv}"
        script_options += f" --seed-size {seed_size}"
        script_options += f" --xdmf False"
        if cut:
            script_options += f" --cut cut"
        workflow.extend(env.PythonScript(
            target=[tardi_mesh_1],
            source=[str(Tardigrade_MOOSE_source_abspath / mesh_script), bounding_csv],
            script_options=script_options
            ))
        # Create new exodus mesh with individual element blocks defined
        # TODO: figure out better way to store material parameters for individual elements --> issue #27 will replace this step!
        mesh_script = 'add_element_blocks_to_mesh.py'
        script_options = f"--input-mesh {tardi_mesh_1}"
        script_options += f" --output-mesh {tardi_mesh_2}"
        script_options += f" --elements {domain_number}"
        script_options += f" --exodus-mesh-map FILTER_macroscale_{model}_{int(domain_number)}_temp.e"
        workflow.extend(env.PythonScript(
            target=[tardi_mesh_2],
            source=[str(Tardigrade_MOOSE_source_abspath / mesh_script), tardi_mesh_1],
            script_options=script_options
            ))
    else:
        seed_str = f"{str(seed_size).split('.')[0]}p{str(seed_size).split('.')[-1]}"
        mesh_copy = f"{params['mesh_copy_root']}_{seed_str}_{domain_number}_elements_with_blocks.e"
        workflow.extend(env.Command(
            target=[tardi_mesh_2],
            source=[f"{mesh_templates_abspath}/{mesh_copy}"],
            action=SCons.Defaults.Copy("${TARGET}", "${SOURCE}", False)
            ))

# build input file
tardigrade_input_script = "build_Tardigrade_input_deck.py"
tardigrade_build_targs = f"{tardi_sim_name}.i"
script_options = f"--output-file {tardigrade_build_targs}"
script_options += f" --calibration-map {calibration_map}"
script_options += f" --mesh {tardi_mesh_2}"
script_options += f" --BCs {params['macro_BC']}"
script_options += f" --disp {params['macro_disp']}"
script_options += f" --duration {params['macro_duration']}"
workflow.extend(env.PythonScript(
    target = [tardigrade_build_targs],
    source = [f"{Tardigrade_MOOSE_source_abspath / tardigrade_input_script}", tardi_mesh_2, calibration_map,
              f"{Tardigrade_MOOSE_source_abspath}/MOOSE_input_deck_tools.py"],
    script_options = script_options
))

# run Tardigrade-MOOSE
if env['mpi']:
    mpi_location = env["mpi"]
else:
    mpi_location = []
tardigrade_moose_targs = [f'{tardi_sim_name}_out.e', f'{tardi_sim_name}_out.csv']
workflow.extend(env.TardigradeSolver(
    target = tardigrade_moose_targs,
    source = [tardigrade_build_targs, tardi_mesh_2],
    LD_LIBRARY_PATH = env['LD_PATH'],
    tardigrade_program = env['Tardigrade'],
    tardigrade_input = tardigrade_build_targs,
    tardigrade_cpus =  env['solve_cpus'],
    stdout_file = f"{tardigrade_moose_targs[0]}.stdout",
    mpi_location = mpi_location,
))

# plot force vs displacement
plot_script = "plot_force_displacement.py"
plot_targets = [f"{tardi_sim_name}_force_displacement.png", f"{tardi_sim_name}_force_displacement.csv"]
script_options = f"--csv-file {tardigrade_moose_targs[1]}"
script_options += f" --output-file {plot_targets[0]}"
script_options += f" --output-csv {plot_targets[1]}"
script_options += f" --final-disp {params['macro_disp']}"
workflow.extend(env.PythonScript(
    target=[plot_targets],
    source=[str(Tardigrade_MOOSE_source_abspath / plot_script)],
    script_options=script_options,
    ))

env.Alias(workflow_name, workflow)
Return("workflow")