#! /usr/bin/env python
"""
    TODO
"""
import pathlib
import os

import waves
import numpy
import yaml

# Inherit the parent construction environment
Import("env")
Import("parameters")
Import("workflow_name")
Import("model")
Import("params")

# Set project-wide paths
calibrate_source_abspath = pathlib.Path(env["calibrate_source_abspath"])
filter_source_abspath = pathlib.Path(env["filter_source_abspath"])

# workflow variables
build_directory = pathlib.Path(Dir(".").abspath)
workflow_configuration = [env["project_configuration"], workflow_name]
domain_number = parameters['num_domains']
seed_size = parameters['seed_size']
filter_file = params['filter_file']
case = params['calibration_case']

# Collect the target nodes to build a concise alias for all targets
workflow = []
ignore_boundary_parameter_sets = []

calibration_script = 'calibrate_element.py'
plot_root = 'CALIBRATION_COMPARISON'

if domain_number == 1:
    calibration_targs = [f'calibrated_parameters_case_{case}_elem_0.yml',
                         f'{plot_root}_PK2_fit_case_{case}.PNG',
                         f'{plot_root}_SIGMA_fit_case_{case}.PNG']
    script_options = f"--input-file {filter_file}"
    script_options += f" --output-file {calibration_targs[0]}"
    script_options += f" --case {case}"
    script_options += f" --Emod {params['material_E']}"
    script_options += f" --nu {params['material_nu']}"
    script_options += f" --L 1.0"
    script_options += f" --element 0"
    script_options += f" --plot-file {plot_root}"
    script_options += f" --dev-norm-errors True"
    if 'calibration_increment' in params.keys():
        script_options += f" --increment {' '.join(str(i) for i in params['calibration_increment'])}"
    if ('UQ_file' in params.keys()) and (params['UQ_file'] == True):
        UQ_output = f"{calibration_targs[0].split('.')[0]}_evals.csv"
        calibration_targs.append(UQ_output)
        script_options += f" --UQ-file {UQ_output}"
    workflow.extend(env.PythonScript(
        target = calibration_targs,
        source = [f"{calibrate_source_abspath / calibration_script}", filter_file],
        script_options = script_options
    ))
    # # summarize calibration results
    # summary_script = 'summarize_calibration_results.py'
    # summary_targs = [f'Calibration_results_{int(domain_number)}_domains_case_{case}.csv']
    # script_options = f'--parameter-sets {calibration_targs[0]}'
    # script_options += f' --case {case}'
    # script_options += f' --results-csv {summary_targs[0]}'
    # workflow.extend(env.PythonScript(
        # target = summary_targs,
        # source = [str(calibrate_source_abspath / summary_script), calibration_targs[0]],
        # script_options = script_options
        # ))
    # Plot lambda vs. mu on evaluations
    if ('UQ_file' in params.keys()) and (params['UQ_file'] == True):
        eval_script = 'plot_objective_evaluation.py'
        output_file = f"{UQ_output.split('.')[0]}_plot.png"
        script_options = f'--csv-file {UQ_output}'
        script_options += f' --output-file {output_file}'
        workflow.extend(env.PythonScript(
            target = [output_file],
            source = [str(calibrate_source_abspath / eval_script), UQ_output],
            script_options = script_options
            ))


# set up parameter study to calibrate each element individually
else:
    element_array = numpy.array(list(range(0,int(domain_number)))).reshape((-1,1))
    calibration_schema = dict(parameter_samples=element_array, parameter_names=numpy.array(['elements']))
    # calibration_generator = waves.parameter_generators.CustomStudy(
        # calibration_schema,
        # output_file= build_directory / f"calibration_study_{domain_number}_case_{case}.h5")
    # calibration_generator.write()
    calibration_generator = waves.parameter_generators.CustomStudy(calibration_schema)

    # calibration loop
    calibrated_files = []
    calibrated_elements = []

    for calib_set, calib_params in calibration_generator.parameter_study_to_dict().items():
        elem = calib_params['elements']
        calibrated_elements.append(str(elem))
        calibration_targs = [f'calibrated_parameters_case_{case}_elem_{elem}.yml',
                             f'{plot_root}_PK2_fit_case_{case}.PNG',
                             f'{plot_root}_SIGMA_fit_case_{case}.PNG']
        calibrated_files.append(f'{calib_set}/{calibration_targs[0]}')
        script_options = f"--input-file {filter_file}"
        script_options += f" --output-file {calibration_targs[0]}"
        script_options += f" --case {case}"
        script_options += f" --Emod {params['material_E']}"
        script_options += f" --nu {params['material_nu']}"
        script_options += f" --L {seed_size}"
        script_options += f" --element {elem}"
        script_options += f" --plot-file {plot_root}"
        script_options += f" --dev-norm-errors True"
        if 'calibration_increment' in params.keys():
            script_options += f" --increment {' '.join(str(i) for i in params['calibration_increment'])}"
        if ('UQ_file' in params.keys()) and (params['UQ_file'] == True):
            UQ_output = f"{calibration_targs[0].split('.')[0]}_evals.csv"
            calibration_targs.append(UQ_output)
            script_options += f" --UQ-file {UQ_output}"
        workflow.extend(env.PythonScript(
            target = [f'{calib_set}/{cali_targ}' for cali_targ in calibration_targs],
            source = [f"{calibrate_source_abspath / calibration_script}", filter_file],
            script_options = script_options
        ))

    # Build calibration map
    calibration_map_script = 'build_calibration_map.py'
    calibration_map_file = f"Calibration_map_elastic_parameters_case_{case}_{domain_number}.csv"
    script_options = f"--output-file {calibration_map_file}"
    script_options += f" --calibrated-elements {' '.join(calibrated_elements)}"
    script_options += f" --calibrated-files {' '.join(calibrated_files)}"
    script_options += " --map-type full_csv --material-type elastic"
    workflow.extend(env.PythonScript(
        target = [calibration_map_file],
        source = [f"{calibrate_source_abspath / calibration_map_script}", calibrated_files],
        script_options = script_options,
    ))

    # make xdmf file containing calibration results
    xdmf_script = 'xdmf_3d_calculations.py'
    output_fileroot = f'CALIBRATION_RESULTS_{model}_elastic_parameters_case_{case}_domain_number_{int(domain_number)}'
    xdmf_targets = [f"{output_fileroot}.{suffix}" for suffix in ['xdmf', 'h5']]
    script_options = f"--input-file {filter_file.split('.xdmf')[0]}"
    script_options += f" --output-file {output_fileroot}"
    script_options += " --write-type calibration"
    script_options += f" --calibration-map-file {calibration_map_file}"
    workflow.extend(env.PythonScript(
        target = xdmf_targets,
        source = [f"{filter_source_abspath / xdmf_script}", calibration_map_file],
        script_options = script_options,
    ))

    # make xdmf file with relative paths
    local_path_script = "xdmf_local_paths.py"
    output_file = f"{output_fileroot}_for_paraview.xdmf"
    script_options = f"--input-file {output_fileroot}.xdmf"
    script_options += f" --output-file {output_file}"
    script_options += f" --oldpath {build_directory/output_fileroot}.h5"
    script_options += f" --newpath {output_fileroot}.h5"
    workflow.extend(env.PythonScript(
        target = output_file,
        source = [f"{filter_source_abspath / local_path_script}"] + xdmf_targets,
        script_options=script_options
    ))

    # summarize calibration results
    summary_script = 'summarize_calibration_results_from_csv.py'
    hist_plot_root = f'kde_elastic_case_{case}'
    best_parameters_yml = f'best_parameters_{int(domain_number)}_elastic_case_{case}'
    summary_targs = [f'Calibration_summary_{int(domain_number)}_domains_plastic_case_{case}.csv',
                     f'{best_parameters_yml}.yml',
                     f'{hist_plot_root}_lambda_hist.PNG']
    script_options = f'--parameter-csv {calibration_map_file}'
    script_options += f' --case {case}'
    script_options += f' --summary-csv {summary_targs[0]}'
    script_options += f' --kde-hist-plot {hist_plot_root}'
    script_options += f' --kde-best {hist_plot_root}_best'
    script_options += f' --kde-best-parameters {best_parameters_yml}'
    workflow.extend(env.PythonScript(
        target = summary_targs,
        source = [str(calibrate_source_abspath / summary_script), calibration_map_file],
        script_options = script_options
        ))

    # Summarize calibration results but ignore elements on boundary
    if ('ignore_boundary' in params.keys()) and (params['ignore_boundary'] == True):

        # find elements on the boundary
        boundary_script = "identify_z_boundary_elements.py"
        macro_file = f"FILTER_macroscale_{model}_{int(domain_number)}"
        boundary_csv = f"{model}_boundary_elements_{int(domain_number)}.csv"
        script_options = f"--macro-file {macro_file}"
        script_options += f" --output-file {boundary_csv}"
        workflow.extend(env.PythonScript(
            target = [boundary_csv],
            source = [str(calibrate_source_abspath / boundary_script)],
            script_options = script_options
            ))

        # New summary without boundary elements --> get best parameters without boundary elements
        summary_script = 'summarize_calibration_results_from_csv.py'
        hist_plot_root = f'kde_elastic_case_{case}_no_BCs'
        best_parameters_yml_no_BCs = f'best_parameters_{int(domain_number)}_elastic_case_{case}_no_BCs'
        summary_targs = [f'Calibration_summary_{int(domain_number)}_domains_plastic_case_{case}_no_BCs.csv',
                         f'{best_parameters_yml_no_BCs}.yml',
                         f'{hist_plot_root}_lambda_hist_no_BCs.PNG']
        script_options = f'--parameter-csv {calibration_map_file}'
        script_options += f' --case {case}'
        script_options += f' --summary-csv {summary_targs[0]}'
        script_options += f' --kde-hist-plot {hist_plot_root}'
        script_options += f' --kde-best {hist_plot_root}_best'
        script_options += f' --kde-best-parameters {best_parameters_yml_no_BCs}'
        script_options += f' --boundary-csv {boundary_csv}'
        workflow.extend(env.PythonScript(
            target = summary_targs,
            source = [str(calibrate_source_abspath / summary_script), calibration_map_file, boundary_csv],
            script_options = script_options
            ))

        # Write new calibration map with boundary element parameters swapped with best_parameters_yml_no_BCs
        best_parameters_yml_no_BCs = f'{best_parameters_yml_no_BCs}.yml'
        calibration_map_file_no_BCs = f"Calibration_map_elastic_parameters_case_{case}_{domain_number}_no_BCs.csv"
        script_options = f"--output-file {calibration_map_file_no_BCs}"
        script_options += " --map-type ignore_boundary_yaml --material-type elastic"
        script_options += f" --best-parameters-yml-no-BCs {best_parameters_yml_no_BCs}"
        script_options += f" --boundary-csv {boundary_csv}"
        script_options += f" --previous-calibration-map {calibration_map_file}"
        workflow.extend(env.PythonScript(
            target = [calibration_map_file_no_BCs],
            source = [f"{calibrate_source_abspath / calibration_map_script}",
                      calibration_map_file, boundary_csv, best_parameters_yml_no_BCs],
            script_options = script_options,
        ))

        # make xdmf file containing calibration results
        xdmf_script = 'xdmf_3d_calculations.py'
        output_fileroot = f'CALIBRATION_RESULTS_{model}_elastic_parameters_case_{case}_domain_number_{int(domain_number)}_no_BCs'
        xdmf_targets = [f"{output_fileroot}.{suffix}" for suffix in ['xdmf', 'h5']]
        script_options = f"--input-file {filter_file.split('.xdmf')[0]}"
        script_options += f" --output-file {output_fileroot}"
        script_options += " --write-type calibration"
        script_options += f" --calibration-map-file {calibration_map_file_no_BCs}"
        workflow.extend(env.PythonScript(
            target = xdmf_targets,
            source = [f"{filter_source_abspath / xdmf_script}", calibration_map_file_no_BCs],
            script_options = script_options,
        ))

        # make xdmf file with relative paths
        local_path_script = "xdmf_local_paths.py"
        output_file = f"{output_fileroot}_for_paraview.xdmf"
        script_options = f"--input-file {output_fileroot}.xdmf"
        script_options += f" --output-file {output_file}"
        script_options += f" --oldpath {build_directory/output_fileroot}.h5"
        script_options += f" --newpath {output_fileroot}.h5"
        workflow.extend(env.PythonScript(
            target = output_file,
            source = [f"{filter_source_abspath / local_path_script}"] + xdmf_targets,
            script_options=script_options
        ))

env.Alias(workflow_name, workflow)
Return("workflow")