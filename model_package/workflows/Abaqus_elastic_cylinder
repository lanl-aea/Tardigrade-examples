#! /usr/bin/env python

""" Workflow for running and single domain upscaling of an Abaqus/Standard DNS of an elastic cylinder under uni-axial stress in compression
Requires the following ``Sconscript(..., exports=[])``
* ``env`` - The SCons construction environment with the following required keys
  * ``filter`` - Boolean speciyfing whether or not to run micromorphic filter for a particular upscaling study
  * ``calibrate`` - Boolean speciyfing whether or not to run calibration for a particular upscaling study
  * ``macro`` - Boolean speciyfing whether or not to run macro simulation(s) in Tardigrade-MOOSE
"""

import pathlib

from model_package.DNS_Abaqus import simulation_variables_nominal


# Inherit the parent construction environment
Import('env')

# Simulation variables
build_directory = pathlib.Path(Dir('.').abspath)
workflow_name = build_directory.name
output_file_type = "h5"
model = "elastic_cylinder"
params = simulation_variables_nominal.elastic_cylinder

# Collect the target nodes to build a concise alias for all targets
workflow = []

# specify targets for visualizing Micromorphic Filter output
viz_targs =  (
    ('plot-cauchy-couple', 'cauchy_couple.png'),
    ('plot-cauchy-stress', 'cauchy_stress.png'),
    ('plot-PK2-stress', 'PK2_stress.png'),
    ('plot-symm-stress', 'symm_stress.png'),
    ('plot-SIGMA-stress', 'SIGMA_stress.png'),
    ('plot-stress-diff', 'stress_diff.png'),
    ('plot-body-couples', 'body_couples.png'),
    ('plot-spin-inertias', 'micro_spin_inertias.png'),
    ('plot-spin-diff', 'spin_diff.png'),
    ('plot-stress-norms', 'stress_norms.png'),
    ('csv-cauchy', 'cauchy.csv'),
    ('csv-symm', 'symm.csv'),
    ('csv-stress-diff', 'stress_diff.csv'),
    ('csv-m', 'm_stress.csv'),
    ('csv-M', 'M_stress.csv'),
    )
params['viz_targs'] = viz_targs

# ---------- DNS ---------------------------------------------------------------
# Run common DNS sconscript
workflow.extend(
    SConscript("Abaqus_elastic_cylinder.scons",
               exports=["env", "workflow_name", "model", "params"],
               duplicate=False))
filter_inputs = params['filter_inputs']

# ---------- FILTER ------------------------------------------------------------
parameters = {'seed_size': params['height'],
              'num_domains': 1,}
filter_results = f"FILTER_RESULTS_{model}_1"
filter_targs = [f"{filter_results}.{ext}" for ext in ['xdmf', 'h5']]
params['filter_targs'] = filter_targs
# Run common filter sconscript
if env['filter']:
    workflow.extend(
        SConscript("filter.scons",
                   exports=["env", "parameters", "workflow_name", "model", "params", "filter_inputs"],
                   duplicate=False))

# ---------- CALIBRATE ---------------------------------------------------------
# Run common calibration sconscript
case = params['calibration_case']
if env['calibrate']:
    filter_file = str(build_directory / filter_targs[0])
    params['filter_file'] = filter_file
    workflow.extend(
        SConscript("calibrate_element.scons",
                   exports=["env", "parameters", "workflow_name", "model", "params"],
                   duplicate=False))
params['calibration_map'] = f'{build_directory}/Calibration_map_elastic_parameters_case_{case}_1.csv'

# ---------- Tardigrade-MOOSE --------------------------------------------------
# Run common Tardigrade-MOOSE sconscript
if env['macro']:
    calibration_map = params['calibration_map']
    tardi_sim_name = f'TARDIGRADE-MOOSE_{model}_1_elements_calib_case_{case}'
    workflow.extend(
        SConscript("tardigrade_moose.scons",
                   exports=["env", "parameters", "workflow_name", "model", "params", "tardi_sim_name", "calibration_map"],
                   duplicate=False))

# Collector alias based on parent directory name
env.Alias(workflow_name, workflow)
