#! /usr/bin/env python

""" TODO

"""

import pathlib

import waves
import numpy
import SCons.Defaults

from model_package.Tardigrade_MOOSE import simulation_variables_nominal

# Inherit the parent construction environment
Import('env')

# set project-wide paths with os-agnostic path separators
Tardigrade_MOOSE_source_abspath = pathlib.Path(env["Tardigrade_MOOSE_source_abspath"])
mesh_templates_abspath = pathlib.Path(env["mesh_templates_abspath"])
model_package_abspath = pathlib.Path(env["model_package_abspath"])

# Simulation variables
build_directory = pathlib.Path(Dir('.').abspath)
workflow_name = build_directory.name
workflow_configuration = [env["project_configuration"], workflow_name]
output_file_type = "h5"
model = "Brazil_disk_platens"
params = simulation_variables_nominal.Brazilian_disk

# Collect the target nodes to build a concise alias for all targets
workflow = []

# Build mesh
mesh_script = 'brazilian_disk_apparatus.py'
tardi_mesh_name = 'brazilian_disk_apparatus'
script_options = f"--output-file {tardi_mesh_name}"
script_options += f" --seed-size {params['seed_size']}"
script_options += f" --height {params['height']}"
script_options += f" --width {params['width']}"
script_options += f" --chord {params['chord']}"
script_options += f" --app-rad {params['app_rad']}"
script_options += f" --app-dep {params['app_dep']}"
script_options += f" --spec-rad {params['spec_rad']}"
script_options += f" --spec-dep {params['spec_dep']}"
script_options += f" --tol {params['tol']}"
workflow.extend(env.PythonScript(
    target=[f'{tardi_mesh_name}.e'],
    source=[str(Tardigrade_MOOSE_source_abspath / mesh_script)],
    script_options=script_options
    ))

# # Write elastic material card
# material_script = 'write_elastic_material_card.py'
# material_card = 'elastic_material_card.yml'
# E, nu = params['material_E'], params['material_nu']
# lamb = E*nu / ((1. + nu)*(1. - 2*nu))
# mu = E / (2*(1. + nu))
# script_options = f'--output-file {material_card}'
# script_options += f' --lamb {lamb}'
# script_options += f' --mu {mu}'
# workflow.extend(env.PythonScript(
    # target=[str(set_name / material_card)],
    # source=[str(Tardigrade_MOOSE_source_abspath / material_script)],
    # script_options=script_options
    # ))

# # build input file
# tardigrade_input_script = "build_Tardigrade_input_deck.py"
# tardi_sim_name = f'TARDIGRADE-MOOSE_{model}_{elements}'
# tardigrade_build_targs = f"{tardi_sim_name}.i"
# tardigrade_build_sources = [str(set_name / source) for source in [tardi_mesh, material_card]]
# rad = params['diam'] / 2.
# script_options = f"--output-file {tardigrade_build_targs}"
# script_options += f" --parameter-sets {material_card}"
# script_options += f" --mesh {tardi_mesh}"
# script_options += f" --BCs {params['macro_BC']}"
# script_options += f" --disp {params['macro_disp']}"
# script_options += f" --duration {params['macro_duration']}"
# script_options += f" --disp-point '{rad} 0. 0.'"
# workflow.extend(env.PythonScript(
    # target = [str(set_name / tardigrade_build_targs)],
    # source = [f"{Tardigrade_MOOSE_source_abspath / tardigrade_input_script}", ],
    # script_options = script_options
    # ))
# tardigrade_build_sources.append(str(set_name / tardigrade_build_targs))

# # run Tardigrade-MOOSE
# if env['mpi']:
    # mpi_location = env["mpi"]
# else:
    # mpi_location = []
# tardigrade_moose_targs = [str(set_name / targ) for targ in [f'{tardi_sim_name}_out.e', f'{tardi_sim_name}_out.csv']]
# workflow.extend(env.TardigradeSolver(
    # target = tardigrade_moose_targs,
    # source = tardigrade_build_sources,
    # LD_LIBRARY_PATH = env['LD_PATH'],
    # tardigrade_program = env['Tardigrade'],
    # tardigrade_input = tardigrade_build_targs,
    # tardigrade_cpus =  solve_cpus,
    # stdout_file = f"{tardi_sim_name}_out.e.stdout",
    # mpi_location = mpi_location,
    # ))

# # plot force vs displacement
# plot_script = "plot_force_displacement.py"
# plot_targets = [f"{tardi_sim_name}_force_displacement.png", f"{tardi_sim_name}_force_displacement.csv"]
# script_options = f"--csv-file {tardigrade_moose_targs[1].split('/')[-1]}"
# script_options += f" --output-file {plot_targets[0]}"
# script_options += f" --output-csv {plot_targets[1]}"
# script_options += f" --final-disp {params['macro_disp']}"
# workflow.extend(env.PythonScript(
    # target=[str(set_name / targ) for targ in plot_targets],
    # source=[str(Tardigrade_MOOSE_source_abspath / plot_script), tardigrade_moose_targs[-1]],
    # script_options=script_options,
    # ))

# Collector alias based on parent directory name
env.Alias(workflow_name, workflow)
