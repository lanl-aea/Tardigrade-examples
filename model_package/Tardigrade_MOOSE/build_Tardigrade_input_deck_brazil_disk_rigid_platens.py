#!python
import argparse
import os
import pathlib
import sys
import yaml


def build_input(output_file, mesh_file, parameter_sets, platen_radius,
                disp, duration, specimen_bottom_surface, specimen_top_surface=None, 
                top_symmetry=None, back_symmetry=None, side_symmetry=None,
                xc_bot=0., yc_bot=0., xc_top=0., yc_top=0., geometry='full',
                material_type='elastic', phi_BC=None):
    '''Write Tardigrade-MOOSE input file for Brazilian disk simulation with platens
    
    :param str output_file: The name of Tardigrade-MOOSE file to write
    :param str mesh_file: The name of the mesh file
    :param list parameter_sets: The list of yaml files containing calibration results
    :param float material_E: The elastic modulus of the specimen material
    :param float material_nu: The Poisson ratio of the specimen material
    :param float platen_radius: The radius of curvature of the Brazilian disk compression platen
    :param float disp: The compressive displacement to be applied
    :param float duration: The duration of the simulation
    :param str specimen_bottom_surface: The name of the specimen bottom contact surface
    :param str specimen_top_surface: The name of the specimen top contact surface. Required if "geometry" = "full."
    :param str top_symmetry: The name of the top symmetry surface. Required if "geometry" = "quarter" or "eighth."
    :param str back_symmetry: The name of the back symmetry surface. Required if "geometry" = "quarter" or "eighth."
    :param str side_set: The name of the side symmetry surface. Required if "geometry" = "quarter" or "eighth."
    :param float xc_bot: The x-position of the center of the circular bottom surface arc
    :param float yc_bot: The y-position of the center of the circular bottom surface arc
    :param float xc_top: The x-position of the center of the circular top surface arc
    :param float yc_top: The y-position of the center of the circular top surface arc
    :param str geometry: The geometry/symmetry type: "full," "quarter," or "eighth"
    :param str material_type: The material type, either "elastic" or "plastic"
    :param str phi_BC: Optional string specifying nodeset to force micro deformation components to be zero

    :returns: ``output_file``
    '''

    assert os.path.exists(mesh_file), f"Mesh file not found: {mesh_file}"

    if geometry == 'full':
        active_BCs = 'bottom_y bottom_x top_y top_x'
        react_surface = specimen_top_surface
        stress_boundary = f'{specimen_bottom_surface} {specimen_top_surface}'
        assert specimen_top_surface != None, "Specimen top surface must be defined if 'geometry' = 'full'!"
    else:
        react_surface = top_symmetry
        stress_boundary = f'{specimen_bottom_surface}'
        assert top_symmetry != None, "Specimen top symmetry must be defined if 'geometry' = 'quarter' or 'eighth'!"
        assert back_symmetry != None, "Specimen back symmetry must be defined if 'geometry' = 'quarter' or 'eighth'!"
        if geometry == 'quarter':
            active_BCs = 'bottom_y bottom_x top_sym back_sym'
        elif geometry == 'eighth':
            active_BCs = 'bottom_y bottom_x top_sym back_sym side_sym'
            assert side_symmetry != None, "Specimen side symmetry must be defined if 'geometry' = 'eighth'!"
        else:
            print('Specify a valid geometry type!')
    if phi_BC is not None:
        active_BCs += ' fix_phi_xx fix_phi_yy fix_phi_zz'
        active_BCs += ' fix_phi_yz fix_phi_xz fix_phi_xy'
        active_BCs += ' fix_phi_zy fix_phi_zx fix_phi_yx'

    # Write input file
    with open(output_file, 'w') as f:
        f.write('###############################################################################\n')
        f.write('[Mesh]\n')
        f.write('  type = FileMesh\n')
        f.write(f'  file = "{mesh_file}"\n')
        f.write('  patch_update_strategy = iteration\n')
        f.write('[]\n')
        f.write('\n')
        f.write('[GlobalParams]\n')
        f.write('  displacements = "disp_x disp_y disp_z"\n')
        f.write('[]\n')
        # Variables
        f.write('# Variables\n')
        f.write('[Variables]\n')
        f.write('  [./disp_x]\n')
        f.write('  [../]\n')
        f.write('  [./disp_y]\n')
        f.write('  [../]\n')
        f.write('  [./disp_z]\n')
        f.write('  [../]\n')
        f.write('  [./phi_xx]\n')
        f.write('  [../]\n')
        f.write('  [./phi_yy]\n')
        f.write('  [../]\n')
        f.write('  [./phi_zz]\n')
        f.write('  [../]\n')
        f.write('  [./phi_yz]\n')
        f.write('  [../]\n')
        f.write('  [./phi_xz]\n')
        f.write('  [../]\n')
        f.write('  [./phi_xy]\n')
        f.write('  [../]\n')
        f.write('  [./phi_zy]\n')
        f.write('  [../]\n')
        f.write('  [./phi_zx]\n')
        f.write('  [../]\n')
        f.write('  [./phi_yx]\n')
        f.write('  [../]\n')
        f.write('[]\n')
        f.write('\n')
        # Kernels
        f.write('# Kernels\n')
        f.write('[Kernels]\n')
        f.write('  #Define the internal force balance equations\n')
        f.write('  [./force_1]\n')
        f.write('    type = InternalForce\n')
        f.write('    component = 0\n')
        f.write('    dof_num   = 0\n')
        f.write('    variable  = disp_x\n')
        f.write('    save_in = force_x\n')
        f.write('\n')
        f.write('    #Coupled variables\n')
        f.write('    u1     = disp_x\n')
        f.write('    u2     = disp_y\n')
        f.write('    u3     = disp_z\n')
        f.write('    phi_11 = phi_xx\n')
        f.write('    phi_22 = phi_yy\n')
        f.write('    phi_33 = phi_zz\n')
        f.write('    phi_23 = phi_yz\n')
        f.write('    phi_13 = phi_xz\n')
        f.write('    phi_12 = phi_xy\n')
        f.write('    phi_32 = phi_zy\n')
        f.write('    phi_31 = phi_zx\n')
        f.write('    phi_21 = phi_yx\n')
        f.write('  [../]\n')
        f.write('  [./force_2]\n')
        f.write('    type = InternalForce\n')
        f.write('    component = 1\n')
        f.write('    dof_num   = 1\n')
        f.write('    variable  = disp_y\n')
        f.write('    save_in = force_y\n')
        f.write('\n')
        f.write('    #Coupled variables\n')
        f.write('    u1     = disp_x\n')
        f.write('    u2     = disp_y\n')
        f.write('    u3     = disp_z\n')
        f.write('    phi_11 = phi_xx\n')
        f.write('    phi_22 = phi_yy\n')
        f.write('    phi_33 = phi_zz\n')
        f.write('    phi_23 = phi_yz\n')
        f.write('    phi_13 = phi_xz\n')
        f.write('    phi_12 = phi_xy\n')
        f.write('    phi_32 = phi_zy\n')
        f.write('    phi_31 = phi_zx\n')
        f.write('    phi_21 = phi_yx\n')
        f.write('  [../]\n')
        f.write('  [./force_3]\n')
        f.write('    type = InternalForce\n')
        f.write('    component = 2\n')
        f.write('    dof_num   = 2\n')
        f.write('    variable  = disp_z\n')
        f.write('    save_in = force_z\n')
        f.write('\n')
        f.write('    #Coupled variables\n')
        f.write('    u1     = disp_x\n')
        f.write('    u2     = disp_y\n')
        f.write('    u3     = disp_z\n')
        f.write('    phi_11 = phi_xx\n')
        f.write('    phi_22 = phi_yy\n')
        f.write('    phi_33 = phi_zz\n')
        f.write('    phi_23 = phi_yz\n')
        f.write('    phi_13 = phi_xz\n')
        f.write('    phi_12 = phi_xy\n')
        f.write('    phi_32 = phi_zy\n')
        f.write('    phi_31 = phi_zx\n')
        f.write('    phi_21 = phi_yx\n')
        f.write('  [../]\n')
        f.write('  #Define the internal couple balance equations\n')
        f.write('  [./couple_11]\n')
        f.write('    type = InternalCouple\n')
        f.write('    component_i = 0\n')
        f.write('    component_j = 0\n')
        f.write('    dof_num     = 3\n')
        f.write('    variable    = phi_xx\n')
        f.write('\n')
        f.write('    #Coupled variables\n')
        f.write('    u1     = disp_x\n')
        f.write('    u2     = disp_y\n')
        f.write('    u3     = disp_z\n')
        f.write('    phi_11 = phi_xx\n')
        f.write('    phi_22 = phi_yy\n')
        f.write('    phi_33 = phi_zz\n')
        f.write('    phi_23 = phi_yz\n')
        f.write('    phi_13 = phi_xz\n')
        f.write('    phi_12 = phi_xy\n')
        f.write('    phi_32 = phi_zy\n')
        f.write('    phi_31 = phi_zx\n')
        f.write('    phi_21 = phi_yx\n')
        f.write('  [../]\n')
        f.write('  [./couple_12]\n')
        f.write('    type = InternalCouple\n')
        f.write('    component_i = 0\n')
        f.write('    component_j = 1\n')
        f.write('    dof_num     = 4\n')
        f.write('    variable    = phi_xy\n')
        f.write('\n')
        f.write('    #Coupled variables\n')
        f.write('    u1     = disp_x\n')
        f.write('    u2     = disp_y\n')
        f.write('    u3     = disp_z\n')
        f.write('    phi_11 = phi_xx\n')
        f.write('    phi_22 = phi_yy\n')
        f.write('    phi_33 = phi_zz\n')
        f.write('    phi_23 = phi_yz\n')
        f.write('    phi_13 = phi_xz\n')
        f.write('    phi_12 = phi_xy\n')
        f.write('    phi_32 = phi_zy\n')
        f.write('    phi_31 = phi_zx\n')
        f.write('    phi_21 = phi_yx\n')
        f.write('  [../]\n')
        f.write('  [./couple_13]\n')
        f.write('    type = InternalCouple\n')
        f.write('    component_i = 0\n')
        f.write('    component_j = 2\n')
        f.write('    dof_num     = 5\n')
        f.write('    variable    = phi_xz\n')
        f.write('\n')
        f.write('    #Coupled variables\n')
        f.write('    u1     = disp_x\n')
        f.write('    u2     = disp_y\n')
        f.write('    u3     = disp_z\n')
        f.write('    phi_11 = phi_xx\n')
        f.write('    phi_22 = phi_yy\n')
        f.write('    phi_33 = phi_zz\n')
        f.write('    phi_23 = phi_yz\n')
        f.write('    phi_13 = phi_xz\n')
        f.write('    phi_12 = phi_xy\n')
        f.write('    phi_32 = phi_zy\n')
        f.write('    phi_31 = phi_zx\n')
        f.write('    phi_21 = phi_yx\n')
        f.write('  [../]\n')
        f.write('  [./couple_21]\n')
        f.write('    type = InternalCouple\n')
        f.write('    component_i = 1\n')
        f.write('    component_j = 0\n')
        f.write('    dof_num     = 6\n')
        f.write('    variable    = phi_yx\n')
        f.write('\n')
        f.write('    #Coupled variables\n')
        f.write('    u1     = disp_x\n')
        f.write('    u2     = disp_y\n')
        f.write('    u3     = disp_z\n')
        f.write('    phi_11 = phi_xx\n')
        f.write('    phi_22 = phi_yy\n')
        f.write('    phi_33 = phi_zz\n')
        f.write('    phi_23 = phi_yz\n')
        f.write('    phi_13 = phi_xz\n')
        f.write('    phi_12 = phi_xy\n')
        f.write('    phi_32 = phi_zy\n')
        f.write('    phi_31 = phi_zx\n')
        f.write('    phi_21 = phi_yx\n')
        f.write('  [../]\n')
        f.write('  [./couple_22]\n')
        f.write('    type = InternalCouple\n')
        f.write('    component_i = 1\n')
        f.write('    component_j = 1\n')
        f.write('    dof_num     = 7\n')
        f.write('    variable    = phi_yy\n')
        f.write('\n')
        f.write('    #Coupled variables\n')
        f.write('    u1     = disp_x\n')
        f.write('    u2     = disp_y\n')
        f.write('    u3     = disp_z\n')
        f.write('    phi_11 = phi_xx\n')
        f.write('    phi_22 = phi_yy\n')
        f.write('    phi_33 = phi_zz\n')
        f.write('    phi_23 = phi_yz\n')
        f.write('    phi_13 = phi_xz\n')
        f.write('    phi_12 = phi_xy\n')
        f.write('    phi_32 = phi_zy\n')
        f.write('    phi_31 = phi_zx\n')
        f.write('    phi_21 = phi_yx\n')
        f.write('  [../]\n')
        f.write('  [./couple_23]\n')
        f.write('    type = InternalCouple\n')
        f.write('    component_i = 1\n')
        f.write('    component_j = 2\n')
        f.write('    dof_num     = 8\n')
        f.write('    variable    = phi_yz\n')
        f.write('\n')
        f.write('    #Coupled variables\n')
        f.write('    u1     = disp_x\n')
        f.write('    u2     = disp_y\n')
        f.write('    u3     = disp_z\n')
        f.write('    phi_11 = phi_xx\n')
        f.write('    phi_22 = phi_yy\n')
        f.write('    phi_33 = phi_zz\n')
        f.write('    phi_23 = phi_yz\n')
        f.write('    phi_13 = phi_xz\n')
        f.write('    phi_12 = phi_xy\n')
        f.write('    phi_32 = phi_zy\n')
        f.write('    phi_31 = phi_zx\n')
        f.write('    phi_21 = phi_yx\n')
        f.write('  [../]\n')
        f.write('  [./couple_31]\n')
        f.write('    type = InternalCouple\n')
        f.write('    component_i = 2\n')
        f.write('    component_j = 0\n')
        f.write('    dof_num     = 9\n')
        f.write('    variable    = phi_zx\n')
        f.write('\n')
        f.write('    #Coupled variables\n')
        f.write('    u1     = disp_x\n')
        f.write('    u2     = disp_y\n')
        f.write('    u3     = disp_z\n')
        f.write('    phi_11 = phi_xx\n')
        f.write('    phi_22 = phi_yy\n')
        f.write('    phi_33 = phi_zz\n')
        f.write('    phi_23 = phi_yz\n')
        f.write('    phi_13 = phi_xz\n')
        f.write('    phi_12 = phi_xy\n')
        f.write('    phi_32 = phi_zy\n')
        f.write('    phi_31 = phi_zx\n')
        f.write('    phi_21 = phi_yx\n')
        f.write('  [../]\n')
        f.write('  [./couple_32]\n')
        f.write('    type = InternalCouple\n')
        f.write('    component_i = 2\n')
        f.write('    component_j = 1\n')
        f.write('    dof_num     = 10\n')
        f.write('    variable    = phi_zy\n')
        f.write('\n')
        f.write('    #Coupled variables\n')
        f.write('    u1     = disp_x\n')
        f.write('    u2     = disp_y\n')
        f.write('    u3     = disp_z\n')
        f.write('    phi_11 = phi_xx\n')
        f.write('    phi_22 = phi_yy\n')
        f.write('    phi_33 = phi_zz\n')
        f.write('    phi_23 = phi_yz\n')
        f.write('    phi_13 = phi_xz\n')
        f.write('    phi_12 = phi_xy\n')
        f.write('    phi_32 = phi_zy\n')
        f.write('    phi_31 = phi_zx\n')
        f.write('    phi_21 = phi_yx\n')
        f.write('  [../]\n')
        f.write('  [./couple_33]\n')
        f.write('    type = InternalCouple\n')
        f.write('    component_i = 2\n')
        f.write('    component_j = 2\n')
        f.write('    dof_num     = 11\n')
        f.write('    variable    = phi_zz\n')
        f.write('\n')
        f.write('    #Coupled variables\n')
        f.write('    u1     = disp_x\n')
        f.write('    u2     = disp_y\n')
        f.write('    u3     = disp_z\n')
        f.write('    phi_11 = phi_xx\n')
        f.write('    phi_22 = phi_yy\n')
        f.write('    phi_33 = phi_zz\n')
        f.write('    phi_23 = phi_yz\n')
        f.write('    phi_13 = phi_xz\n')
        f.write('    phi_12 = phi_xy\n')
        f.write('    phi_32 = phi_zy\n')
        f.write('    phi_31 = phi_zx\n')
        f.write('    phi_21 = phi_yx\n')
        f.write('  [../]\n')
        f.write('[]\n')
        f.write('\n')
        # Aux variables
        f.write('# Aux variables\n')
        f.write('[AuxVariables]\n')
        f.write('  [force_x][]\n')
        f.write('  [force_y][]\n')
        f.write('  [force_z][]\n')
        f.write('  [./pk2_11]\n')
        f.write('    order = CONSTANT\n')
        f.write('    family = MONOMIAL\n')
        f.write('  [../]\n')
        f.write('  [./pk2_22]\n')
        f.write('    order = CONSTANT\n')
        f.write('    family = MONOMIAL\n')
        f.write('  [../]\n')
        f.write('  [./pk2_33]\n')
        f.write('    order = CONSTANT\n')
        f.write('    family = MONOMIAL\n')
        f.write('  [../]\n')
        f.write('  [./sigma_11]\n')
        f.write('    order = CONSTANT\n')
        f.write('    family = MONOMIAL\n')
        f.write('  [../]\n')
        f.write('  [./sigma_22]\n')
        f.write('    order = CONSTANT\n')
        f.write('    family = MONOMIAL\n')
        f.write('  [../]\n')
        f.write('  [./sigma_33]\n')
        f.write('    order = CONSTANT\n')
        f.write('    family = MONOMIAL\n')
        f.write('  [../]\n')
        if material_type == 'plastic':
            f.write('## plastic Aux variables\n')
            f.write('  [./macro_gamma]\n')
            f.write('    order = CONSTANT\n')
            f.write('    family = MONOMIAL\n')
            f.write('  [../]\n')
            f.write('  [./micro_gamma]\n')
            f.write('    order = CONSTANT\n')
            f.write('    family = MONOMIAL\n')
            f.write('  [../]\n')
            f.write('  [./micro_gradient_gamma_1]\n')
            f.write('    order = CONSTANT\n')
            f.write('    family = MONOMIAL\n')
            f.write('  [../]\n')
            f.write('  [./micro_gradient_gamma_2]\n')
            f.write('    order = CONSTANT\n')
            f.write('    family = MONOMIAL\n')
            f.write('  [../]\n')
            f.write('  [./micro_gradient_gamma_3]\n')
            f.write('    order = CONSTANT\n')
            f.write('    family = MONOMIAL\n')
            f.write('  [../]\n')
            f.write('  [./macro_isv]\n')
            f.write('    order = CONSTANT\n')
            f.write('    family = MONOMIAL\n')
            f.write('  [../]\n')
            f.write('  [./micro_isv]\n')
            f.write('    order = CONSTANT\n')
            f.write('    family = MONOMIAL\n')
            f.write('  [../]\n')
            f.write('  [./micro_gradient_isv_1]\n')
            f.write('    order = CONSTANT\n')
            f.write('    family = MONOMIAL\n')
            f.write('  [../]\n')
            f.write('  [./micro_gradient_isv_2]\n')
            f.write('    order = CONSTANT\n')
            f.write('    family = MONOMIAL\n')
            f.write('  [../]\n')
            f.write('  [./micro_gradient_isv_3]\n')
            f.write('    order = CONSTANT\n')
            f.write('    family = MONOMIAL\n')
            f.write('  [../]\n')
        f.write('[]\n')
        f.write('\n')
        # Aux kernels
        f.write('# Aux kernels\n')
        f.write('[AuxKernels]\n')
        f.write('  [./pk2_11]\n')
        f.write('    type = MaterialStdVectorAux\n')
        f.write('    property = PK2\n')
        f.write('    index = 0\n')
        f.write('    variable = pk2_11\n')
        f.write('  [../]\n')
        f.write('[]\n')
        f.write('\n')
        f.write('[AuxKernels]\n')
        f.write('  [./pk2_22]\n')
        f.write('    type = MaterialStdVectorAux\n')
        f.write('    property = PK2\n')
        f.write('    index = 4\n')
        f.write('    variable = pk2_22\n')
        f.write('  [../]\n')
        f.write('[]\n')
        f.write('\n')
        f.write('[AuxKernels]\n')
        f.write('  [./pk2_33]\n')
        f.write('    type = MaterialStdVectorAux\n')
        f.write('    property = PK2\n')
        f.write('    index = 8\n')
        f.write('    variable = pk2_33\n')
        f.write('  [../]\n')
        f.write('[]\n')
        f.write('\n')
        f.write('[AuxKernels]\n')
        f.write('  [./sigma_11]\n')
        f.write('    type = MaterialStdVectorAux\n')
        f.write('    property = SIGMA\n')
        f.write('    index = 0\n')
        f.write('    variable = sigma_11\n')
        f.write('  [../]\n')
        f.write('[]\n')
        f.write('\n')
        f.write('[AuxKernels]\n')
        f.write('  [./sigma_22]\n')
        f.write('    type = MaterialStdVectorAux\n')
        f.write('    property = SIGMA\n')
        f.write('    index = 4\n')
        f.write('    variable = sigma_22\n')
        f.write('  [../]\n')
        f.write('[]\n')
        f.write('\n')
        f.write('[AuxKernels]\n')
        f.write('  [./sigma_33]\n')
        f.write('    type = MaterialStdVectorAux\n')
        f.write('    property = SIGMA\n')
        f.write('    index = 8\n')
        f.write('    variable = sigma_33\n')
        f.write('  [../]\n')
        if material_type == 'plastic':
            f.write('## plastic Aux kernels\n')
            f.write('[AuxKernels]\n')
            f.write('  [./macro_gamma]\n')
            f.write('    type = MaterialStdVectorAux\n')
            f.write('    property = SDVS\n')
            f.write('    index = 45\n')
            f.write('    variable = macro_gamma\n')
            f.write('  [../]\n')
            f.write('[]\n')
            f.write('\n')
            f.write('[AuxKernels]\n')
            f.write('  [./micro_gamma]\n')
            f.write('    type = MaterialStdVectorAux\n')
            f.write('    property = SDVS\n')
            f.write('    index = 46\n')
            f.write('    variable = micro_gamma\n')
            f.write('  [../]\n')
            f.write('[]\n')
            f.write('\n')
            f.write('[AuxKernels]\n')
            f.write('  [./micro_gradient_gamma_1]\n')
            f.write('    type = MaterialStdVectorAux\n')
            f.write('    property = SDVS\n')
            f.write('    index = 47\n')
            f.write('    variable = micro_gradient_gamma_1\n')
            f.write('  [../]\n')
            f.write('[]\n')
            f.write('\n')
            f.write('[AuxKernels]\n')
            f.write('  [./micro_gradient_gamma_2]\n')
            f.write('    type = MaterialStdVectorAux\n')
            f.write('    property = SDVS\n')
            f.write('    index = 48\n')
            f.write('    variable = micro_gradient_gamma_2\n')
            f.write('  [../]\n')
            f.write('[]\n')
            f.write('\n')
            f.write('[AuxKernels]\n')
            f.write('  [./micro_gradient_gamma_3]\n')
            f.write('    type = MaterialStdVectorAux\n')
            f.write('    property = SDVS\n')
            f.write('    index = 49\n')
            f.write('    variable = micro_gradient_gamma_3\n')
            f.write('  [../]\n')
            f.write('[]\n')
            f.write('\n')
            f.write('[AuxKernels]\n')
            f.write('  [./macro_isv]\n')
            f.write('    type = MaterialStdVectorAux\n')
            f.write('    property = SDVS\n')
            f.write('    index = 50\n')
            f.write('    variable = macro_isv\n')
            f.write('  [../]\n')
            f.write('[]\n')
            f.write('\n')
            f.write('[AuxKernels]\n')
            f.write('  [./micro_isv]\n')
            f.write('    type = MaterialStdVectorAux\n')
            f.write('    property = SDVS\n')
            f.write('    index = 51\n')
            f.write('    variable = micro_isv\n')
            f.write('  [../]\n')
            f.write('[]\n')
            f.write('\n')
            f.write('[AuxKernels]\n')
            f.write('  [./micro_gradient_isv_1]\n')
            f.write('    type = MaterialStdVectorAux\n')
            f.write('    property = SDVS\n')
            f.write('    index = 52\n')
            f.write('    variable = micro_gradient_isv_1\n')
            f.write('  [../]\n')
            f.write('[]\n')
            f.write('\n')
            f.write('[AuxKernels]\n')
            f.write('  [./micro_gradient_isv_2]\n')
            f.write('    type = MaterialStdVectorAux\n')
            f.write('    property = SDVS\n')
            f.write('    index = 53\n')
            f.write('    variable = micro_gradient_isv_2\n')
            f.write('  [../]\n')
            f.write('[]\n')
            f.write('\n')
            f.write('[AuxKernels]\n')
            f.write('  [./micro_gradient_isv_3]\n')
            f.write('    type = MaterialStdVectorAux\n')
            f.write('    property = SDVS\n')
            f.write('    index = 54\n')
            f.write('    variable = micro_gradient_isv_3\n')
            f.write('  [../]\n')
        f.write('[]\n')
        f.write('\n')
        # Reaction Force
        sample_force = 'force_y'
        f.write('# Reaction force\n')
        f.write('[Postprocessors]\n')
        f.write('  [bot_react_y]\n')
        f.write('    type = NodalSum\n')
        f.write(f'    variable = {sample_force}\n')
        f.write(f'    boundary = "{react_surface}"\n')
        f.write('  []\n')
        f.write('[]\n')
        f.write('\n')
        # BCs
        f.write('# BCs\n')
        f.write('[BCs]\n')
        f.write(f'  active = "{active_BCs}"\n')
        f.write('  [./bottom_y]\n')
        f.write('    type = CylindricalSurfaceDirichletBC\n')
        f.write('    variable = disp_y\n')
        f.write(f'    boundary = "{specimen_bottom_surface}"\n')
        f.write(f'    center = "{xc_bot} {yc_bot} 0"\n')
        f.write(f'    radius = {platen_radius}\n')
        f.write(f'    velocity = {disp}\n')
        f.write('    axis = "0. 0. 1."\n')
        f.write('    normal = "0. 1. 0."\n')
        f.write('    use_sector = true\n')
        f.write('    angle_min = 3.14159265359\n')
        f.write('    angle_max = 6.28318530718\n')
        f.write('    invert_displacement = true\n')
        f.write('  [../]\n')
        f.write('  [./bottom_x]\n')
        f.write('    type = CylindricalSurfaceDirichletBC\n')
        f.write('    variable = disp_x\n')
        f.write(f'    boundary = "{specimen_bottom_surface}"\n')
        f.write(f'    center = "{xc_bot} {yc_bot} 0"\n')
        f.write(f'    radius = {platen_radius}\n')
        f.write(f'    velocity = {disp}\n')
        f.write('    axis = "0. 0. 1."\n')
        f.write('    normal = "0. 1. 0."\n')
        f.write('    use_sector = true\n')
        f.write('    angle_min = 3.14159265359\n')
        f.write('    angle_max = 6.28318530718\n')
        f.write('    invert_displacement = true\n')
        f.write('  [../]\n')
        if geometry == 'full':
            f.write('  [./top_y]\n')
            f.write('    type = CylindricalSurfaceDirichletBC\n')
            f.write('    variable = disp_y\n')
            f.write(f'    boundary = "{specimen_top_surface}"\n')
            f.write(f'    center = "{xc_top} {yc_top} 0"\n')
            f.write(f'    radius = {platen_radius}\n')
            f.write(f'    velocity = {disp}\n')
            f.write('    axis = "0. 0. 1."\n')
            f.write('    normal = "0. 1. 0."\n')
            f.write('    use_sector = true\n')
            f.write('    angle_min = 3.14159265359\n')
            f.write('    angle_max = 6.28318530718\n')
            f.write('    invert_displacement = true\n')
            f.write('  [../]\n')
            f.write('  [./top_x]\n')
            f.write('    type = CylindricalSurfaceDirichletBC\n')
            f.write('    variable = disp_x\n')
            f.write(f'    boundary = "{specimen_top_surface}"\n')
            f.write(f'    center = "{xc_top} {yc_top} 0"\n')
            f.write(f'    radius = {platen_radius}\n')
            f.write(f'    velocity = {disp}\n')
            f.write('    axis = "0. 0. 1."\n')
            f.write('    normal = "0. -1. 0."\n')
            f.write('    use_sector = true\n')
            f.write('    angle_min = 3.14159265359\n')
            f.write('    angle_max = 6.28318530718\n')
            f.write('    invert_displacement = true\n')
            f.write('  [../]\n')
        else:
            f.write('  [./back_sym]\n')
            f.write('    type = DirichletBC\n')
            f.write('    variable = disp_z\n')
            f.write(f'    boundary = "{back_symmetry}"\n')
            f.write('    preset = true\n')
            f.write('    value = 0\n')
            f.write('  [../]\n')
            f.write('  [./top_sym]\n')
            f.write('    type = DirichletBC\n')
            f.write('    variable = disp_y\n')
            f.write(f'    boundary = "{top_symmetry}"\n')
            f.write('    preset = true\n')
            f.write('    value = 0\n')
            f.write('  [../]\n')
            if geometry == 'eighth':
                f.write('  [./side_sym]\n')
                f.write('    type = DirichletBC\n')
                f.write('    variable = disp_x\n')
                f.write(f'    boundary = "{side_symmetry}"\n')
                f.write('    preset = true\n')
                f.write('    value = 0\n')
                f.write('  [../]\n')
        # Option to force Phis to be zero
        if phi_BC is not None:
            f.write('  [fix_phi_xx]\n')
            f.write('    type = DirichletBC\n')
            f.write('    variable = phi_xx\n')
            f.write(f'    boundary = "{phi_BC}"\n')
            f.write('    value = 0 \n')
            f.write('  [../]\n')
            f.write('  [fix_phi_yy]\n')
            f.write('    type = DirichletBC\n')
            f.write('    variable = phi_yy\n')
            f.write(f'    boundary = "{phi_BC}"\n')
            f.write('    value = 0 \n')
            f.write('  [../]\n')
            f.write('  [fix_phi_zz]\n')
            f.write('    type = DirichletBC\n')
            f.write('    variable = phi_zz\n')
            f.write(f'    boundary = "{phi_BC}"\n')
            f.write('    value = 0 \n')
            f.write('  [../]\n')
            f.write('  [fix_phi_yz]\n')
            f.write('    type = DirichletBC\n')
            f.write('    variable = phi_yz\n')
            f.write(f'    boundary = "{phi_BC}"\n')
            f.write('    value = 0 \n')
            f.write('  [../]\n')
            f.write('  [fix_phi_xz]\n')
            f.write('    type = DirichletBC\n')
            f.write('    variable = phi_xz\n')
            f.write(f'    boundary = "{phi_BC}"\n')
            f.write('    value = 0 \n')
            f.write('  [../]\n')
            f.write('  [fix_phi_xy]\n')
            f.write('    type = DirichletBC\n')
            f.write('    variable = phi_xy\n')
            f.write(f'    boundary = "{phi_BC}"\n')
            f.write('    value = 0 \n')
            f.write('  [../]\n')
            f.write('  [fix_phi_zy]\n')
            f.write('    type = DirichletBC\n')
            f.write('    variable = phi_zy\n')
            f.write(f'    boundary = "{phi_BC}"\n')
            f.write('    value = 0 \n')
            f.write('  [../]\n')
            f.write('  [fix_phi_zx]\n')
            f.write('    type = DirichletBC\n')
            f.write('    variable = phi_zx\n')
            f.write(f'    boundary = "{phi_BC}"\n')
            f.write('    value = 0 \n')
            f.write('  [../]\n')
            f.write('  [fix_phi_yx]\n')
            f.write('    type = DirichletBC\n')
            f.write('    variable = phi_yx\n')
            f.write(f'    boundary = "{phi_BC}"\n')
            f.write('    value = 0 \n')
            f.write('  [../]\n')
        f.write('[]\n')
        # Materials
        f.write('# Materials\n')
        f.write('[Materials]\n')
        # Load in parameter data for each filter domain / element
        if len(parameter_sets) > 1:
            for i, set in enumerate(parameter_sets):
                # Load yaml file
                stream = open(set, 'r')
                UI = yaml.load(stream, Loader=yaml.FullLoader)
                stream.close()
                if material_type == 'plastic':
                    mat_line_01 = UI['line 01']
                    mat_line_02 = UI['line 02']
                    mat_line_03 = UI['line 03']
                    mat_line_04 = UI['line 04']
                    mat_line_05 = UI['line 05']
                    mat_line_06 = UI['line 06']
                    mat_line_07 = UI['line 07']
                    mat_line_08 = UI['line 08']
                    mat_line_09 = UI['line 09']
                    mat_line_10 = UI['line 10']
                    mat_line_11 = UI['line 11']
                    mat_line_12 = UI['line 12']
                    mat_line_13 = UI['line 13']
                    mat_line_14 = UI['line 14']
                    # Write in material info
                    f.write(f'  [./linear_elastic_{i}]\n')
                    f.write('    type = MicromorphicMaterial\n')
                    f.write(f'    material_fparameters = "{mat_line_01}\n')
                    f.write(f'                            {mat_line_02}\n')
                    f.write(f'                            {mat_line_03}\n')
                    f.write(f'                            {mat_line_04}\n')
                    f.write(f'                            {mat_line_05}\n')
                    f.write(f'                            {mat_line_06}\n')
                    f.write(f'                            {mat_line_07}\n')
                    f.write(f'                            {mat_line_08}\n')
                    f.write(f'                            {mat_line_09}\n')
                    f.write(f'                            {mat_line_10}\n')
                    f.write(f'                            {mat_line_11}\n')
                    f.write(f'                            {mat_line_12}\n')
                    f.write(f'                            {mat_line_13}\n')
                    f.write(f'                            {mat_line_14}"\n')
                    f.write('    number_SDVS = 55\n')
                    f.write(f'    model_name = "LinearElasticityDruckerPragerPlasticity"\n')
                    f.write('\n')
                    f.write('    #Coupled variables\n')
                    f.write('    u1     = "disp_x"\n')
                    f.write('    u2     = "disp_y"\n')
                    f.write('    u3     = "disp_z"\n')
                    f.write('    phi_11 = "phi_xx"\n')
                    f.write('    phi_22 = "phi_yy"\n')
                    f.write('    phi_33 = "phi_zz"\n')
                    f.write('    phi_23 = "phi_yz"\n')
                    f.write('    phi_13 = "phi_xz"\n')
                    f.write('    phi_12 = "phi_xy"\n')
                    f.write('    phi_32 = "phi_zy"\n')
                    f.write('    phi_31 = "phi_zx"\n')
                    f.write('    phi_21 = "phi_yx"\n')
                    f.write(f'    block = "element_{i}"\n')
                    f.write('  [../]\n')
                else:
                    mat_line_1 = UI['line 1']
                    mat_line_2 = UI['line 2']
                    mat_line_3 = UI['line 3']
                    mat_line_4 = UI['line 4']
                    # Write in material info
                    f.write(f'  [./linear_elastic_{i}]\n')
                    f.write('    type = MicromorphicMaterial\n')
                    f.write(f'    material_fparameters = "{mat_line_1}\n')
                    f.write(f'                            {mat_line_2}\n')
                    f.write(f'                            {mat_line_3}\n')
                    f.write(f'                            {mat_line_4}"\n')
                    f.write(f'    model_name = "LinearElasticity"\n')
                    f.write('\n')
                    f.write('    #Coupled variables\n')
                    f.write('    u1     = "disp_x"\n')
                    f.write('    u2     = "disp_y"\n')
                    f.write('    u3     = "disp_z"\n')
                    f.write('    phi_11 = "phi_xx"\n')
                    f.write('    phi_22 = "phi_yy"\n')
                    f.write('    phi_33 = "phi_zz"\n')
                    f.write('    phi_23 = "phi_yz"\n')
                    f.write('    phi_13 = "phi_xz"\n')
                    f.write('    phi_12 = "phi_xy"\n')
                    f.write('    phi_32 = "phi_zy"\n')
                    f.write('    phi_31 = "phi_zx"\n')
                    f.write('    phi_21 = "phi_yx"\n')
                    f.write(f'    block = "element_{i}"\n')
                    f.write('  [../]\n')
        else:
            # Load yaml file
            set = parameter_sets[0]
            stream = open(set, 'r')
            UI = yaml.load(stream, Loader=yaml.FullLoader)
            stream.close()
            if material_type == 'plastic':
                mat_line_01 = UI['line 01']
                mat_line_02 = UI['line 02']
                mat_line_03 = UI['line 03']
                mat_line_04 = UI['line 04']
                mat_line_05 = UI['line 05']
                mat_line_06 = UI['line 06']
                mat_line_07 = UI['line 07']
                mat_line_08 = UI['line 08']
                mat_line_09 = UI['line 09']
                mat_line_10 = UI['line 10']
                mat_line_11 = UI['line 11']
                mat_line_12 = UI['line 12']
                mat_line_13 = UI['line 13']
                mat_line_14 = UI['line 14']
                # Write in material info
                f.write('  [./linear_elastic]\n')
                f.write('    type = MicromorphicMaterial\n')
                f.write(f'    material_fparameters = "{mat_line_01}\n')
                f.write(f'                            {mat_line_02}\n')
                f.write(f'                            {mat_line_03}\n')
                f.write(f'                            {mat_line_04}\n')
                f.write(f'                            {mat_line_05}\n')
                f.write(f'                            {mat_line_06}\n')
                f.write(f'                            {mat_line_07}\n')
                f.write(f'                            {mat_line_08}\n')
                f.write(f'                            {mat_line_09}\n')
                f.write(f'                            {mat_line_10}\n')
                f.write(f'                            {mat_line_11}\n')
                f.write(f'                            {mat_line_12}\n')
                f.write(f'                            {mat_line_13}\n')
                f.write(f'                            {mat_line_14}"\n')
                f.write('    number_SDVS = 55\n')
                f.write(f'    model_name = "LinearElasticityDruckerPragerPlasticity"\n')
                f.write('\n')
                f.write('    #Coupled variables\n')
                f.write('    u1     = "disp_x"\n')
                f.write('    u2     = "disp_y"\n')
                f.write('    u3     = "disp_z"\n')
                f.write('    phi_11 = "phi_xx"\n')
                f.write('    phi_22 = "phi_yy"\n')
                f.write('    phi_33 = "phi_zz"\n')
                f.write('    phi_23 = "phi_yz"\n')
                f.write('    phi_13 = "phi_xz"\n')
                f.write('    phi_12 = "phi_xy"\n')
                f.write('    phi_32 = "phi_zy"\n')
                f.write('    phi_31 = "phi_zx"\n')
                f.write('    phi_21 = "phi_yx"\n')
                f.write('  [../]\n')
            else:
                mat_line_1 = UI['line 1']
                mat_line_2 = UI['line 2']
                mat_line_3 = UI['line 3']
                mat_line_4 = UI['line 4']
                # Write in material info
                f.write('  [./linear_elastic]\n')
                f.write('    type = MicromorphicMaterial\n')
                f.write(f'    material_fparameters = "{mat_line_1}\n')
                f.write(f'                            {mat_line_2}\n')
                f.write(f'                            {mat_line_3}\n')
                f.write(f'                            {mat_line_4}"\n')
                f.write(f'    model_name = "LinearElasticity"\n')
                f.write('\n')
                f.write('    #Coupled variables\n')
                f.write('    u1     = "disp_x"\n')
                f.write('    u2     = "disp_y"\n')
                f.write('    u3     = "disp_z"\n')
                f.write('    phi_11 = "phi_xx"\n')
                f.write('    phi_22 = "phi_yy"\n')
                f.write('    phi_33 = "phi_zz"\n')
                f.write('    phi_23 = "phi_yz"\n')
                f.write('    phi_13 = "phi_xz"\n')
                f.write('    phi_12 = "phi_xy"\n')
                f.write('    phi_32 = "phi_zy"\n')
                f.write('    phi_31 = "phi_zx"\n')
                f.write('    phi_21 = "phi_yx"\n')
                f.write('  [../]\n')
        f.write('[]\n')
        f.write('\n')
        # Execution and Timestepping
        f.write('[Preconditioning]\n')
        f.write('  [./SMP]\n')
        f.write('    type = SMP\n')
        f.write('    full = true\n')
        f.write('  [../]\n')
        f.write('[]\n')
        f.write('\n')
        dt = duration / 100
        f.write('[Executioner]\n')
        f.write('  type = Transient\n')
        f.write('  solve_type = PJFNK\n')
        f.write('  petsc_options_iname = "-pc_type -pc_factor_mat_solver_type"\n')
        f.write('  petsc_options_value = "lu    superlu_dist"\n')
        f.write('  line_search = "none"\n')
        f.write('  automatic_scaling = true\n')
        f.write('  nl_rel_tol = 1e-8\n')
        f.write('  nl_abs_tol = 1e-8\n')
        f.write('  l_tol = 1e-3\n')
        f.write('  l_max_its = 60\n')
        f.write('  nl_max_its = 50\n')
        f.write('  start_time = 0.0\n')
        f.write(f'  end_time = {duration}\n')
        f.write('  dtmin = 1e-6\n')
        f.write('  dtmax= 0.1\n')
        f.write('\n')
        f.write('  [TimeStepper]\n')
        f.write('    type = IterationAdaptiveDT\n')
        f.write('    growth_factor=1.2\n')
        f.write(f'    dt = {dt}\n')
        f.write('  []\n')
        f.write('[]\n')
        f.write('[Outputs]\n')
        f.write('  exodus = true\n')
        f.write('  perf_graph = true\n')
        f.write('  csv = true\n')
        f.write('  [./console]\n')
        f.write('    type = Console\n')
        f.write('  [../]\n')
        f.write('[]\n')
        f.write('\n')

    return 0


def get_parser():

    script_name = pathlib.Path(__file__)

    prog = f"python {script_name.name} "
    cli_description = "Write MOOSE input file for Brazilian disk simulation with platens"
    parser = argparse.ArgumentParser(description=cli_description, prog=prog)
    parser.add_argument('-o', '--output-file', type=str, required=True,
        help="Specify the name of Tardigrade-MOOSE file to write")
    parser.add_argument('--mesh', type=str, required=True,
        help='Specify the mesh file')
    parser.add_argument('--parameter-sets', nargs="+", required=True,
        help='Specify the list of yaml files containing calibration results')
    parser.add_argument('--platen-radius', type=float, required=True,
        help='The radius of curvature of the Brazilian disk compression platen')
    parser.add_argument('--disp', type=float, required=True,
        help='Specify the compressive displacement to be applied')
    parser.add_argument('--duration', type=float, required=True,
        help='Specify the duration of the simulation')
    parser.add_argument('--specimen-bottom-surface', type=str, required=True,
        help='Specify the name of the specimen bottom contact surface')
    parser.add_argument('--specimen-top-surface', type=str, required=False, default=None,
        help='Specify the name of the specimen top contact surface. Required if "geometry" = "full."')
    parser.add_argument('--top-symmetry', type=str, required=False, default=None,
        help='Specify the name of the top symmetry surface. Required if "geometry" = "quarter" or "eighth."')
    parser.add_argument('--back-symmetry', type=str, required=False, default=None,
        help='Specify the name of the back symmetry surface. Required if "geometry" = "quarter" or "eighth."')
    parser.add_argument('--side-symmetry', type=str, required=False, default=None,
        help='Specify the name of the side symmetry surface. Required if "geometry" = "quarter" or "eighth."')
    parser.add_argument('--xc-bot', type=float, required=False, default=0.,
        help='Specify the x-position of the center of the circular bottom surface arc')
    parser.add_argument('--yc-bot', type=float, required=False, default=0.,
        help='Specify the y-position of the center of the circular bottom surface arc')
    parser.add_argument('--xc-top', type=float, required=False, default=0.,
        help='Specify the x-position of the center of the circular top surface arc')
    parser.add_argument('--yc-top', type=float, required=False, default=0.,
        help='Specify the y-position of the center of the circular top surface arc')
    parser.add_argument('--geometry', type=str, required=False, default='full',
        help='Specify the geometry/symmetry type: "full," "quarter," or "eighth"')
    parser.add_argument('--material-type', type=str, required=False, default='elastic',
        help='Specify the material type: "elastic" or "plastic"')
    parser.add_argument('--phi-BC', type=str, required=False, default=None,
        help='Optional string specifying nodeset to force micro deformation components to be zero')
    return parser

if __name__ == '__main__':
    parser = get_parser()
    
    args, unknown = parser.parse_known_args()
    sys.exit(build_input(output_file=args.output_file,
                         mesh_file=args.mesh,
                         parameter_sets=args.parameter_sets,
                         platen_radius=args.platen_radius,
                         disp=args.disp,
                         duration=args.duration,
                         specimen_bottom_surface=args.specimen_bottom_surface,
                         specimen_top_surface=args.specimen_top_surface,
                         top_symmetry=args.top_symmetry,
                         back_symmetry=args.back_symmetry,
                         side_symmetry=args.side_symmetry,
                         xc_bot=args.xc_bot,
                         yc_bot=args.yc_bot,
                         xc_top=args.xc_top,
                         yc_top=args.yc_top,
                         geometry=args.geometry,
                         material_type=args.material_type,
                         phi_BC=args.phi_BC,
                         ))
